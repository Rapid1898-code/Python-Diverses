----
### MODULE
import math                      # Import python module
from math import ceil            # Import specific function of a module
import numpy as np               # Import a module with abbreviation
if __name__ == '__main__':       # When directly called - programm is running from here
python --version				 # Check which python version is installed
----



----
### VIRTUALENV
pip install virtualenv                                     # Install virtualenv
pip list                                                   # Global packages installed
where python                                               # Shows where the python-file is (Windows)
which python                                               # Shows where the python-file is (Linux)
virtualenv pj1_env                                         # Create new virtual environment pj1_env
project1_env\Scripts\activate                              # Activate environment pj1_env
    when activated: pip list                               # Now only shows the installed modules for the virtual environment
    pip install package                                    # Only installs in the activated virtual environment
pip freeze --local > requirements.txt                      # Extracts all the modules / dependencies to a txt-file 
deactivate                                                 # Go back to the global environment
virtualenv -p C:\..path to..\Python37\python.exe py37_env  # Create new virtual env with specific python-version
py37_env\Scripts\activate                                  # Activate new virtual env named py37_env
python --version                                           # Shows the used python version in the virtual env
pip install -r requirements.txt                            # Install all the packages from requirment.txt
----



----
### Intellij IDEA IDE
Ctrl + Alt + F7				# Find usages
Ctrl + F    				# Find in File
Ctrl + REGEX				# Replace in File
F3							# Find next
Ctrl + G					# Goto line
Ctrl + E					# Recent files
Ctrl + TABLE				# File switcher
Ctrl + D					# Copy / Duplicate lines	
----



----
### OPERATORS and INPUTS
import math                     # Import module for math calculations
5 // 2                          # Result without Decimals (=> 2)
7 % 2                           # Modulo / Rest of the division (=> 1)
d,e,f = 4,5,6                   # Assigment of several varaibles
a,b = b,a                       # Change / swap 2 values
a += 1                          # Increase value by one
round (77.2321, 2)              # Value is rounded to two decimal places => 77.23
random.randint(1,6)             # Random number between 1 and 6 like a cube (needs import random)
random.choice(list)             # Random entry from a list (needs import random)
str(5), float("5"), int("5")    # Conversion to String / Float / Int
abs(-2)                         # Outputs absolute value => 2
int(input("Alter?"))            # Input age and change to int
type(var)                       # Returns the type of a variable
dir(var)                        # Shows all available methods and attributes for the object as list
isinstance(x,float)             # Check if x has type format float
isinstance(x,str)               # Check if x has type format string
x = float("inf")                # Set var to max-value (float infinite)
math.sqrt(9)                    # Calculates the sqrt of the value => 3
if "myVar" in locals():         # Check if a variable exists
sys.argv[1:].upper()            # Check for argument which is given when starting the program
----



----
### STRING
s = "this is a test"
"{} can be {}".format("Strings", "formated")                       # Insert variables
"{0} like, {0} especially {0} but {1}".format("Joe", "noodles")    # Multiple use
s.count ("i")                                                      # Counts the occurrence of a text
s.find ("ist")                                                     # Returns the index where the text is found
[x.start() for x in re.finditer('ist', s)]                         # Returns all indexwa as a list (needs import re)
s = s.lower()                                                      # Reduce the whole string
s = s.upper()                                                      # Capitalize the whole string
s = s.capitalize()                                                 # Capitalize the first char
s = s.title()                                                      # Capitalize the first char of all words
s.split()                                                          # Split the words in a list
s.splitlines()                                                     # Split sentences after line breaks
s = s.strip()                                                      # Delete all whitespaces at the beginning and the end
s= s.replace("e","X")                                              # Replacement of two strings
s.isdigit()                                                        # TRUE if the whole string are digits
s.isalpha()                                                        # True if the whole string are no digits
s.find("txt")                                                      # Find position of string in string
s2 in s                                                            # TRUE if string2 is in strings1
l = list(s)                                                        # Change string to list with all single chars
ord(char)                                                          # Convert char to ASCII value
chr(ascii)                                                         # Convert ASCII value to char (eg. 65=A, 97=a)
hashlib.md5(s).encode('utf-8')).hexdigest()                        # Outputs hashvalue oif the string (needs import hashlib)
exec(print("hello"))                                               # Execute statement in a string => hello
eval("2+2")                                                        # Gives the value of an expression => 4
my_string[::-1]													   # Reverse a string
----



----
### REGEX
import re
https://medium.com/factory-mind/regex-tutorial-a-simple-cheatsheet-by-examples-649dc1c3f285
pattern = re.compile("^[0-9]{4}-[0-9]{2}$")                        # find str with 4xdigits + "-"char + 2xdigits
pattern.match(s)                                                   # check if pattern matches - <> None when matches
----



----
### LISTS and TUPELS
l = []                                           # Define empty list
l = [4,5,6]                                      # Define list with content
l = list(range(20))                              # Define list - content is list from 0 to 19
l = ["" for x in range(8)]                       # Define list with 8 empyt strings
l = [x.upper( for x in l)]                       # Uppercase the whole list
l = [["" for x in range(5)] for x in range(5)]   # Define a nested list with 5x5
l.append(1)                                      # Add 1 element to the list at the back
l.extend([6,5,4])                                # Add several elements to the list at the back
l.insert(3, "xyz")                               # Insert an element at the index-position 3
l.index("xzy")                                   # Returns index position of element "xyz"
l.pop()                                          # Delete last element from list
l.pop(0)                                         # Delete first element from list
l.sort()                                         # Sort list ascending
l.sort(reverse=True)                             # Sort list descending
l_sort = sorted(l)                               # Sort list and store it in a different independent list
l.reverse()                                      # Reverse the complete list
l_reverse = revrsed(l)                               # Reverse complete list and store it in different independent list
del l[2]                                             # Delete element at index position 2
l.remove("abc")                                      # Delete element with this value from the list
l.clear()                                            # Delete complete content of the list (same as l = [])
min(l)                                               # Find smallest element in the list
max(l)                                               # Fing biggest element in the list
sum(l)                                               # Sum of all elements in the list
2xls_sum  = [sum(pair) for pair in zip(l1, l2)]      # Pair Sorting from 2 lists (1 with 1, 2 with 2, 3 mit 3, aso.) 
len(l)                                               # Count of elements in list
l.count("a")										 # Count of occurence of the element "a" in the list	
l2 = l[:]                                            # Copy of a list (with normal allocation - both lists are updated)
l2 = list(l)                                         # Copy of a list (second variant)
l.copy()                                             # 
l[0]                                                 # First element
l[-1]                                                # Last element
l[-3:]                                               # Last 3 elements
l[2:4]                                               # Elements from index position 2 to 3
l[:2]                                                # Elements from 0 to 1 (exclusive index position 2)
l[2:]                                                # Elements from index position 2 to the end of the list
l[::2]                                               # Every second element [start:end:step]
9 in l                                               # Check if element is in list
if any(x in string for x in ["ab","cd","de"]):       # Check if any elements from the list are in the string
if all(x in string for x in ["ab","cd","de"]):       # Check if all elements from the list are in the string    
if all(x not in string for x in ["ab","cd","de"]):   # Check if all elements from the list are NOT in the string    
for i in l:                                          # Iterate through list content
for i in range(len(l)):                              # Iterate through list with index
for idx, cont in enumerate(l):                       # Iterate through list with index and content
print(', '.join(l))                                  # Print list without brackets ["a","b","c"] => a, b, c
# Check if list is all unique						 # Check if list is all unique
def all_unique(lst):
    return len(lst) == len(set(lst))
all_unique(l)


----



----
### DICTIONARY                                          (key/value - content)
d = {}                                               # Define empty dict
d = {"one": 1, "two": 2, "three": 3}                 # Define dict with content
d = dict([("one",1),("two",2),("three",3)])          # Define dict with content (with dupels)
d = dict([["one",1],["two",2],["three",3]])          # Define dict with content (with pairs in nested list)
d = dict(zip(["one","two","three"], [1,2,3]))        # Define dict with 2 different lists (1x keys and 1x values)
d["two"]                                             # Access with key element
list(d.keys())                                       # Read keys from dict to list
list(d.values())                                     # Read values from dict to list
len(d)                                               # Count of entries in dict
"three" in d                                         # Check if key is in dict (true / false)
d["four"] = 4                                        # New entry for dict (key = "four", value = 4)
del d["one"]                                         # Delete specific key in dict
mydict[new_key] = mydict.pop(old_key)                # Rename dict-keyname
combined_dict = {**d1, **d2}                         # Combine 2 dicts
for key in d.keys():                                 # Iterate through dict keys
for key in sorted(d.keys()):                         # Iterate through sorted dict keys ascending
for key in sorted(d.keys(),reverse=True):            # Iterate through sorted dict keys descending
for val in d.values():                               # Iterate through dict values
for key, val in d.items():                           # Iterate through keys and values of the dict
{k: v for k, v in sorted(chars.items(),              # Sort dict descending according to values (=item[1])
         key=lambda item: item[1], reverse=True)}  
{k: v for k, v in sorted(chars.items(),              # Sort dict descending according to keys (=item[0])
         key=lambda item: item[0], reverse=True)}  
{k: v for k, v in sorted(chars.items(),              # Dict sorted: 1st value-desc (x[0]) - 2nd key-ascnd (-x[0])
         key=lambda x: (-x[1],x[0]))}
----



----
### SETS                   (values can only occur one time in the set => difference to lists)
s = set()               # Define empty set
s = {1,1,2,2,3,4}       # Define set with content
s2 = {1,7,8}            # Define second set
s.add(5)                # Add element in set1
s.update([10,11,12])    # Add several elements to set1
s & s2                  # Intersection of 2 sets (same as: s.intersection(s2))
s | s2                  # Untion of 2 sets (same as: s.union(s2))
s - s2                  # Difference of 2 sets (same as: s.difference(s2))
s <= s2                 # True if s is subset from s2 (same as: s.issubset(s2))
3 in s                  # Check if element is in set
s.pop()                 # Delete lowest elmeent in set
s.discard(5)            # Delete element 5 from setr (or s.remove(5) - but with that is key error possible)
----



----
### CONTROL STRUCTURES and ITERATIONS
if x>10: pass                # If / elif / else
elif x> 10: pass
else: pass

for i in range(5):           # 5 iterations from 0 to 4
for i in range(0, 5, 1)      # 5 iterations from 0 to 4 (start, end, step)
for i in range(4, -1, -1)    # Iterations descending from 4 to 0

while x < 4:                 # While loop with break condition
while True:                  # Endless while loop - has to be exited with break
break                        # Break loop completely
continue                     # Break actual loop run - continue with next loop run
----



----
### FUNCTIONS
def add(x=0,y=0):                # Define function - with default value 0 if no input is given
    erg = x+y                    # Calculatin in function
    return erg                   # Return value from the function

def pet (animal,n1=None,n2="x")  # Optional argument in the funtction (first element is must - second optional)   
pet("Cat")                       # Calling function with n1=None and n2 = "x"
pet("Cat","name")				 # Calling function with n1=name and n2 = "X"
pet("Cat",n2="xyz") 			 # Calling function with n1=None and n2 = "xyz" (third parameter has to be named when calling)


def varargs(*args): print(args)  # Function with infinite arguments
varargs(1,2,3)                   # Oututs (1,2,3)

def keyword_args(**kwargs):
    print(kwargs)
keyword_args("a"=3, "b"=4)       # Outputs {"a":3, "b":4}  
----



----
### CLASSES
class Human(object):           # Define a class
    species = "Homo Sapiens"   # Fix variable / class variable for all instances of the class
    def __init__(self,name):   # Constructor - automatically applied when an instance is created
        self.name = name
    def say(self, msg):        # Methode of the class
        return "{name}: {message}".format(name=self.name, message=msg)
    @classmethod               # Class methode - is used by all instances
    def get_species(cls):
        return cls.species
    @staticmethod              # Static methode - is called without class or method
    def grunt():
        return "*grunt*"    
    
    
i = Human(name="Ian")          # Create instance of the class
print(i.say("Hi"))             # Call the methode of the class (output: "Ian: Hi")
j = Human(name="Joel")         # Create additonal instance of the class
print(i.say("Hallo"))          # Call the methode of the class (output: "Joel: Hallo")
i.get_species()                # Output "Homo Sapiens"
j.get_species()                # Same output  "Homo Sapiens"
Human.species = "Was Neues"    # Change of the class variable - applies for all instances
Human.grant()                  # Aufruf der statischen Methode => Ausgabe: "*grund*" 
----



----
### FILES TXT
fn = "test.txt"
with open(fn) as f:                                     # Read textfile - stored in list per line
    lines = [x.strip() for x in f.readlines()]          # Whitespaces are eliminated with strip()
with open(fn,"w") as obj: obj.write("Ein neuer Text")   # Writing in textfile
with open(fn,"a") as obj: obj.write("\nNoch ein Text")  # Append text in the next line
    
while True:                  							# Try/Except - checks if file can be saved
try:                         							# otherwise outputs a error message
    writer.save ()    
    break
except Exception as e:
    print ("Error: ", e)
	traceback.print_exc()                               # Outputs the detailed error message
    input ("File Open not possible - pls close and press <Enter>")    
----
   
   
   
----
### JSON format   
import json                                         # Import json-module
fn = "numbers.json"
with open(fn) as data: info = json.loads(data)      # Reading informations in json-format
#json-example										# Example for json-file	
{
	"name" : "Chuck",
	"phone" = {
		"type" : "int1"
		"number" : "+1 734 555"
	}
	"email" : {
		"hide" : "yes"
	}	
}
info["name"]										# Read name value => "Chuck"
info["email"]["hide"]								# Read hide value from email => yes	
for item in info:									# Iterate trough the json-file (eg. many persons)
with open(fn,"w") as data: json.dump(info, data)    # Writing informations in json-format (e.g. after updating the values/format)
----



----
### XML format
import xml.etree.ElementTree as ET					# Import xml-module
<persons>
	<person>										# Example for xml-file
		<name>Chuck</name>
		<phone type="int1"> +1 734 555"</phone>
		<email hide="yes"/>
	</person>
	...
</persons>
tree = ET.fromstring(data)							# Read xml-file into tree
tree.find("name").text								# Read name text => "Chuck"
tree.find("email".get("hide"))						# Read hide value from email => yes		
lst = persons.findall("persons/person")				# Iterate trough xml-file (eg. many persons)
for item in lst:


----
### MODULE - CSV
import csv                       
with open("test.csv","w",newline="") as fp:               # Open csv-file in writemode
    a = csv.writer (fp, delimiter=",")                    # Define csv-writer with ","-delimiter
    data = [["A", "B"],["100", "24"],["120", "33"]]       # Data for writing in nested list form
    a.writerows (data)                                    # Writing individual rows
    
### Read csv-data from a HTML-link
import urllib.request
import codecs
url = link                                                      # direct link to a csv html file
ftpstream = urllib.request.urlopen(url)
csvfile = csv.reader(codecs.iterdecode(ftpstream, 'utf-8'))     # output is nested list
----



----
### MODULE - GSPREAD
# API for GoogleSheets
# Tutorial: https://techwithtim.net/tutorials/google-sheets-python-api-tutorial/
# Create a project on https://console.cloud.google.com/
# See further setup in tutorial
import gspread                                                      # import module
from oauth2client.service_account import ServiceAccountCredentials  # import module for account credentials
from pprint import pprint                                           # import module for better output formatting
scope = ["https://spreadsheets.google.com/feeds",
         'https://www.googleapis.com/auth/spreadsheets',
         "https://www.googleapis.com/auth/drive.file",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name
    ("creds.json", scope)
client = gspread.authorize(creds)                                   # Credentials Mgmt for GoogleSheets
sheet = client.open("testpython").sheet1                            # Open the spreadhseet
data = sheet.get_all_records()                                      # Get a list of all records
len(data)                                                           # Count of all used rows in the sheet
pprint(data)                                                        # Show all data with pprint - pretty print
row = sheet.row_values(3)                                           # Get row 3 (starts counting from 1 - not 0)
col = sheet.col_values(5)                                           # Get col E (starts counting from 1 - not 0)
col = sheet.col_values(2)[3:5]                                      # Get values from col B rows 4 and 5
cell = sheet.cell(1,2).value                                        # Get the value from row 1 and col B
sheet.update_cell(2,2, "CHANGED")                                   # Update cell from row 2 and col B
sheet.insert_row(["new1","new2","new3"],2)                          # Insert new row at row number 2
sheet.append_row(["new1","new2","new3"])                            # Append new row at the end
sheet.sort((1, 'asc'), (2, 'des'), range='A2:G20')                  # Sorting the sheet (Range + col1 asc + col2 desc)
cell_list = worksheet.range('A1:G1')                                # Define cell area / cell row
new_values = [1,2,3,4,5]                                            # Define new values for area / row
for i, val in enumerate(new_values): cell_list[i].value = val       # Write new values to cell area / cell row
worksheet.update_cells(cell_list)                                   # Upate cell area / cell row    
----



----
###### MODULE - OPENPYXL
from openpyxl import load_workbook                      # Import module
wb = load_workbook(("Test.xlsx"))                       # Load xlsx
wb.sheetnames                                           # All worksheets from the 
ws = wb["sheet1"]                                       # Select specific worksheet in workbook
ws = wb.active                                          # Select active worksheet from workbook
ws["A1"].value                                          # Value from specific cell
ws.cell(row=1, column=1).value                          # Value from specific cell (other method)
ws["A1"] = 97                                           # Assign value to specific cell
wb.save("Test2.xlsx")                                   # Save workbook to xlsx
for row in ws["A1":"C3"]:                               # Loop trough specific area and print the cell values
    for cell in row: print(cell.value)
for cell in ws["C"]: print(cell.value)                  # Loop trough specific column and print the cell values
ws.insert(cols(2,2))                                    # Insert 2 new columns at index column B                          
ws.delete(cols(2))                                      # Delete column 2
del wb["sheet4"]                                        # Delete worksheet in workbook

### Read whole worksheet to a nested list
data_list = []
for row in ws.iter_rows ():
    zeile = []
    for cell in row:
        if cell.value is None:
            zeile.append ("")
        else:
            zeile.append (cell.value)
    data_list.append (zeile)

### Saving a nested list in XLSX
import pandas as pd
from openpyxl import load_workbook
cont = [[row1_cell1, row1_cell2], [row2.cell1,row3_cell3]]      # Nested list for saving
book = load_workbook ("fn.xlsx")                                # load existing XLSX - skip when overwriting
writer = pd.ExcelWriter ("fn.xlsx", engine='openpyxl',          # Define writer from pandas
                         options={'strings_to_numbers': True})
pd.DataFrame (cont).to_excel (writer, sheet_name="Worksheet",   # Prepare Data for XLSX and worksheet
                              header=False, index=False) 
writer.save()                                                   # Save XLSX
writer.close()

### Checking if xlsx is open while trying to save
while True:
    try:
        writer.save ()
        writer.close ()
        break
    except Exception as e:
        print ("Error: ", e)
		traceback.print_exc()
        input ("Datei kann nicht geöffnet werden - bitte schließen und <Enter> drücken!")

### Read column to a list
mylist = []
for col in ws['A']:
     mylist.append(col.value)

### Automatic adjustment of the columns accoring to best fit
column_widths = []
ws = writer.sheets[stock]
for row in content:                                    # Determination of the longest value per column
    for i, cell in enumerate (row):
        if len (column_widths) > i:
            if len (str (cell)) > column_widths[i]:
                column_widths[i] = len (str (cell))
        else:
            column_widths += [len (str (cell))]
    for i, column_width in enumerate (column_widths):  # Col 0 and 1 with fixed length - rest according to longest value in col
        if i == 0:
            ws.column_dimensions[get_column_letter (i + 1)].width = 35
        elif i == 1:
            ws.column_dimensions[get_column_letter (i + 1)].width = 32
        else:
            ws.column_dimensions[get_column_letter (i + 1)].width = column_width + 2
    
### Formating the xlsx
(when a cell is formated 2 times - it gets overwritten)
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
bold = Font (bold=True)                                                                # bold font
bg_yellow = PatternFill (fill_type="solid", start_color='fbfce1', end_color='fbfce1')  # yellow background (use color picker)
bg_grey = PatternFill (fill_type="solid", start_color='babab6', end_color='babab6')    # grey background (use color picker)
bg_green = PatternFill (fill_type="solid", start_color='8af542', end_color='8af542')   # blue background (use color picker)
frame_all = Border (left=Side (style='thin'), right=Side (style='thin'),               # define border on very side
                    top=Side (style='thin'), bottom=Side (style='thin'))
frame_upanddown = Border (top=Side (style='thin'), bottom=Side (style='thin'))         # border only on top and bottom
size14 = Font (bold=True, size="14")                                                   # font size 14
left_allign = Alignment (horizontal="left")                                            # define left alignment
right_allign = Alignment (horizontal="right")                                          # define right alignment
for row in ws["D1":"G34"]:                                         # define right alignment for area
    for cell in row: cell.alignment = right_allign  
areas = ["A7:G19","A27:G31"]                                       # define full border for several areas
for area in areas:
    for row in ws[area]:
        for cell in row: cell.border = frame_all
for i in ["A6","D6","E6","A26","D26","E26"]:                       # set background and size for several specific cells
    ws[i].fill = bg_green
    ws[i].font = size12
freeze = ws["B2"]                                                  # freeze worksheet at cell B2 for right and down scrolling 
ws.freeze_panes = freeze        
ws.sheet_properties.pageSetUpPr.fitToPage = True                   # fit xlsx to one page for printing - 1st part
ws.page_setup.fitToHeight = False                                  # fit xlsx to one page for printing - 2nd part
ws.set_printer_settings(paper_size=1, orientation = 'landscape')   # set page to landscape horizontal
ws.set_printer_settings(paper_size=1, orientation = 'portrait')   # set page to landscape horizontal
----



----
###### MODULE - XLWINNGS
### Update XLSX in reealtime
import xlwings as xw                                    # Import module
wb = xw.Book ("name.xlsx")                              # Read XLSX
ws = wb.sheets["name_sheet"]                            # Read specific worksheet
ws["A1"].value = "xyz"                                  # Updates specific cell
l = ws.range("A2:A100").value                           # Read specific cell to list
l[1].value = "new value"                                # Update a before read value
ws.range("A2:A100").value = l                           # Update a 
xl_col_sort(ws,1)                                       # Sort worksheet in the first col (function see below)

### Sorting workssheet in given col
def xl_col_sort(sheet,col_num):                         
    sheet.range((2,col_num)).api.SortKey1=sheet.range((2,col_num)).api, Order1=1)
    return
----



----
### MODULE WIN32COM
# Create Worksheets as PDF from XLSX
import win32com.client                                  # Import Module
import os
inp = os.getcwd() + "\\" +"excel.xlsx"                  # Define Input-XLSX
out = os.getcwd() + "\\" +"ws.pdf"                      # Define Output-PDF
o = win32com.client.Dispatch("Excel.Application")       # Initialize Excel Application
o.Visible = False                                       # Do everything hidden
wb = o.Workbooks.Open(inp)                              # Open XLSX
wb.ActiveSheet.ExportAsFixedFormat (0, out)             # Create PDF from the active worksheet in the xlsx
wb.Close(True)                                          # Close XLSX
# Optional / Additonal
wb.Sheets.Count                                         # Number of Worksheets
wb.WorkSheets ([3,4,8]).Select()                        # Select 3 different worksheets by number (for exporting afterwards)
ws = wb.Worksheets[4]                                   # Assign worksheet 4
ws.PageSetup.Zoom = False                               # No Zooming
ws.PageSetup.FitToPagesTall = 1                         # Fit to 1 height
ws.PageSetup.FitToPagesWide = 1                         # Fit to 1 width
ws.PageSetup.PrintArea = "A1:G50"                       # Select specific print area
----



----
### MODULE PyPDF2 (Working with PDFs)
# Read PDF informations / metadata
from PyPDF2 import PdfFileReader 						# Import Module for PDF Reading
with open (fn, 'rb') as f:
    pdf = PdfFileReader (f)								# Read PDF informations
    info = pdf.getDocumentInfo ()						# Read PDF infos^
    number_of_pages = pdf.getNumPages ()				# Read number of pages
	print(info)											# Outputs all informations
	print(info.title)									# Outputs title of the pdf
	print(info.author)									# Outputs author of the pdf

# Read Text from Pdf			
page = pdf.getPage (7)									# Select page 8						
text = page.extractText ()								# Extract text	
print (text)											# print (text	

# Split PDFs
from PyPDF2 import PdfFileWriter						# Import Module for PDF Writing
pdf_writer = PdfFileWriter()							# Create new instance of PDF writer
pdf_writer.addPage(page)                                # Add Page to writer
with open(output_filename, 'wb') as out:				# Write splitted PDF
	pdf_writer.write(out)

# Merge PDFs
from PyPDF2 import PdfFileMerger						# Import Module for PDF Merging
pdf_merger = PdfFileMerger()							# Create new instance of PDF merger
pdf_merger.append(path)                                 # Append Page for merging
with open(output_path, 'wb') as fileobj:				# Write merged PDF
	pdf_merger.write(fileobj)

page.rotateClockwise(90)								# Rotate clockwise
page.rotateCounterClockwise(90)							# Rotate counter clockwise
page.mergePage(watermark_page)							# Overlaying / Watermarking two pages
----



----
###### MYSQL / SQL
import mysql.connector                                     # Import module for mysql access
mydb = mysql.connector.connect                             # Define connection
    (host="localhost",user="root",passwd="pwd")
mycursor = mydb.cursor()                                   # Set Cursor on mySQL
mycursor.execute("CREATE DATABASE db")                     # Creates database "db"
mycursor.execute("SHOW DATABASES")                         # Show databases and informations
    for db in mycursor: print(db)
mycursor.execute("CREATE TABLE students                    # Create new table with 2 cols
                (name VARCHAR(255),age INTEGER(10))")
mycursor.execute("SHOW TABLES")                            # Show tables and informations
    for tb in mycursor: print(tb)
sqlFormula = "INSERT INTO students                         # Insert row in table with the 2 values using sql injection
                (name, age) VALUES (%s, %s)"
student1 = ("Rachel", 22)                                  # Define a row with values to insert
mycursor.execute(sqlFormula,student1)                      # Execute the sql statement to add one row
mydb.commit()                                              # Commit the change (otherwise no update will be saved to db)
students = [("Tom", 22),("Mark", 29),("Clara", 52)]        # Define more rows with values
mycursor.executemany(sqlFormula,students)                  # Execute the sql statement to add more row (from list / tuple)   
mycursor.execute("SELECT age FROM students")               # Select col "age" from table "students"
myresult = mycursor.fetchall()                             # Read all rows according the above select statement
myresult = mycursor.fetchone()                             # Read one / first row according the above select statement
for row in myresult: print(row)                            # Output the read row / table informations
sql = "SELECT * FROM students WHERE age > 25"              # Define select (greater than)
sql = "SELECT * FROM students WHERE name LIKE 'M%'"        # Define select (with like clausel)
mycursor.execute(sql)                                      # Execute SQL
sql = "SELECT * FROM students WHERE name = %s"             # Define select (with sql injection)
mycursor.execute(sql, ("Mike", ))                          # Execute SQL with parameters
sql = "UPDATE students SET age = 82 WHERE name='xyz'"      # Update row where name = "xyz"
sql = "SELECT * FROM students LIMIT 5"                     # Limit the output to 5 rows
sql = "SELECT * FROM students LIMIT 5 OFFSET 2             # Limit the output toi 5 rows and starting with element 2
sql = "SELECT * FROM students ORDER BY name"               # Output content - ascending order
sql = "SELECT * FROM students ORDER BY name DESC"          # Output content - descending order
sql = "DELETE FROM students WHERE name = 'xyz'"            # Delete row with name "xyz"
sql = "DROP TABLE IF EXISTS students"                      # Drop whole table (if exists helps if there no table anymore)  

##Read ticker for specific ticker                 
sql = "SELECT ticker FROM stock_main where ticker=%s"      # Or Select * to get all values from the table
cont = [(summary["symbol"])]
c.execute(sql,cont)
data = c.fetchall()                 
----



----
###### MYSQL / SQL ALCHEMY ######
from sqlalchemy import create_engine                       # Import MODULE
engine = create_engine("mysql+pymysql:                     # Define access to the MySQL-DB (username, pw, dbname)
//user:pw@localhost/dbname?host=localhost?port=3306")
conn = engine.connect()                                    # Establish connection
engine.table_names()                                       # Read all existing tables from the databasen - returns list
conn.execute("SELECT * FROM actor").fetchall()             # Read data from db - returns list with tupels as rows

## Tabelle anlegen in MySQL DB
from sqlalchemy import Table, Column, Integer, String, Float, MetaData
meta = MetaData()                                          # Tabelle anlegen in MySQL DB
students = Table(
   'students', meta,
   Column('id', Integer, primary_key = True),
   Column('name', String(45)),
   Column('lastname', String(45)),
)
meta.create_all(engine)

## Create INSERT / UPDATE / DELETE / SELECT statements
students.insert()                                           # Creates INSERT Statement according due the whole students structure
	=> shows: INSERT INTO students (id, name, lastname, floatvar) VALUES (:id, :name, :lastname, :floatvar)
students.insert().values(name = 'Karan')                    # Creates INSERT Statement for specific attribute
	=> shows: INSERT INTO students (name) VALUES (:name)
students.update()                                           # Creates UPDATE Statement
	=> shows: UPDATE students SET id=:id, name=:name, lastname=:lastname, floatvar=:floatvar
students.delete()                                           # Creates DELETE Statement 
	=> shows: DELETE FROM students
students.select()                                           # Creates SELECT Statement
	=> shows: SELECT students.id, students.name, students.lastname, students.floatvar  FROM students

## Execute SQL command - INSERT                             # Insert rows in table
conn = engine.connect()                                     # Insert one row
ins = students.insert().values name = 'Brauneder', lastname = 'Karl')
result = conn.execute(ins)
result.inserted_primary_key                                 # Shows the inserted primary key
conn.execute(students.insert(), [                           # Insert more rows
   {'name':'Krankl', 'lastname' : 'Hans'},
   {'name':'Herzog','lastname' : 'Andreas'},
])

## Execute SQL command - SELECT                             # Select rows from table
s = students.select()                                       # Creates select statement for SELECT *
result = conn.execute(s)                                    # Excenute select statement
for row in result: print(row)                               # Outputs the result rows for select
s = students.select().where(students.c.id > 10)             # Creates select statement with WHERE clausel

## Execute SQL with Textual SQL                             # Select Statement with textual SQL
from sqlalchemy.sql import text
t = text("SELECT name FROM students")
result = conn.execute(t)
for row in result: print(row)
t = text("select students.name, students.lastname from students where students.name between :x and :y")
result = conn.execute(t, x = 'A', y = 'L')                  # Select statement with where-parameters

## Using Aliases
from sqlalchemy.sql import alias, select
st = students.alias("a")
s = select([st]).where(st.c.id > 2)
conn.execute(s).fetchall()

## Execute UPDATE statement
conn = engine.connect()
stmt=students.update().where(students.c.lastname=='Khanna').values(lastname='Kapoor')
conn.execute(stmt)
s = students.select()
conn.execute(s).fetchall()

## Execute DELETE statementconn = engine.connect()
stmt = students.delete().where(students.c.lastname == 'Khanna')
conn.execute(stmt)
s = students.select()
conn.execute(s).fetchall()


----



----
# MODULES - DATES (DATETIME), CALENDAR, TIMEIT, TIME, SYS, CTYPES
# Standardmodules from python no pip install necessary
from datetime import datetime, timedelta                     # Import module datetime and timedelta
from datetime import date                                    # Import module dat
https://www.programiz.com/python-programming/datetime/strptime      # Overview % commands
datetime.strptime(s, "%Y-%m-%d")                             # Conversion string to datetime in format dd.mm.jjjj
datetime.strftime(dt, "%Y-%m-%d")                            # Conversion datetime to string in format  dd.mm.jjjj
datetime.strftime((datetime.strptime(cont_tmp,"%m/%d/%Y")),"%Y-%m-%d")      # Convert dateformat from string in one line (1st from - 2nd to)

isinstance(x, datetime.date)								 # Check if variable is of type datetime.date                   
date = date(2020,7,24)                                       # Define date as "2020-07-24"
date_time = datetime(2020,3,5,19,27,23)                      # Define date+time as "2020-03-05 19:27:23"
tday = datetime.today()                                      # Actual date in datetime format
now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")           # Actual daten+time in format 2020-06-09 20:11:13)
tday.year, tday.month, tday.day                              # Year / month / day of the actual day
tday.isoweekday()                                            # Returns weekday (monday=1, sunday=7)
tdelta = timedelta(days=7)                                   # Creates timedelta for 7 days
tday + tdelta                                                # 7 days are added to the actual day
newdate = date - timedelta(days=1)                           # Previous 1-day-back-date for date
date2-date1                                                  # Timedelta for two dates
daysDiff = (date2-date1).daysDiff                            # Difference in days
minDiff = (date2-date1).total_seconds() / 60                 # Difference in minutes
datetime.fromisoformat('2020-07-10 02:00:00').timestamp()    # Generate ISO-format from datetime
iso_dt = datetime.fromisoformat(str(datetime.now())).timestamp()   # Generate ISO-format from actual date
date = datetime.fromtimestamp(1594339200000 / 1e3)           # Generate Datetime from ISO-format

# Check last day of month & first weekday of month
import calendar
calendar.monthrange(year,month)                         # return tuple - 1st: weekday first day - 2nd: ultimo day

# Timing a specific activity
import timeit
start = timeit.default_timer()                          # Start timer
stop = timeit.default_timer()                           # Stop timer
round(stop-start/60,2)                                  # Stopped time in minutes and rounde for 2 decimals

# Countdown while waiting
import time, import sys                                    
time.sleep(3)                                           # Delay for 3 seconds
for i in range (30, 0, -1):                             # Delay for 30 seconds - countdown in one row
    sys.stdout.write (str (i) + ' ')                    # Countdown output
    sys.stdout.flush ()
    time.sleep (1)

# Check which os system running    
from sys import platform
if platform == "linux"                                  # Program is excecuting from Linux
if platform == "win32":                                 # Program ix excecuting from Windows
if platform == "darwin":                                # Program is excecuting from Mac
    
# Read monitor resolution
import ctypes
user32 = ctypes.windll.user32
screensize = user32.GetSystemMetrics(0),                # 1st parameter is width, 2nd parameter is height
    user32.GetSystemMetrics(1)
----



----
###### MODULE Currencyconverter
from currency_converter import CurrencyConverter		# Import Module
from datetime import date								# Import Module for rate-checks for specific date
c = CurrencyConverter()
c.convert(100, 'USD', 'AUD')							# Convert 100 USD to AUD with for actual date
c.convert(100, 'USD', 'AUD', date=date(2013, 3, 21))	# Convert 100 USD to AUD for date 2013-03-21
first_date, last_date = c.bounds['BGN']					# Check begin and end-date for all rates for BGN
c.currencies											# Read all possible currencies in a set	
----



----
###### MOUDLE Countries, Currency, Language
Description: https://pypi.org/project/pycountry/
import pycountry								# Install moduel
list(pycountry.countries)                       # List of all countries with several informations
c = pycountry.countries.get(alpha_2='DE')       # Searching for country-informatns for "DE"
c.alpha_2                                       # Outputs => DE
c.alpha_3										# Outputs => DEU
c.numeric                                       # Outputs number of the coutnry => 276
c.name                                          # Outputs full name of the country => Germany	
c.official_name                                 # Outputs the official name => "Federal Republic of Germany!
list(pycountry.currencies)						# List of all currencies
list(pycountry.languages)						# List of all languages                            
list(pycountry.historic_countries)              # List of all historic countries which not more exists
list(pycountry.subdivisiones)                   # List of all subdivided countries
----



----
# MODULES - SMTPLIB, MIMEText - Sending EMails
# if you have 2-Factor-Authentification you must generate a App-Password for GMail
import smtplib
from email.mime.text import MIMEText
s = smtplib.SMTP('smtp.gmail.com', 587)                      # SMTP-Server and port number from the mail provider (e.g. GMail)
print(s.ehlo())                                              # Response 250 means connection is ok
print(s.starttls())                                
print(s.login('sender@gmail.com', 'xyz123'))                 # Not the real pw - only the app-generated pw from gmail
msg = MIMEText("This is the text of the mail")               # Message of the email
sender = ['sender@gmail.com']                                # One recipient
recipients = ['recip1@gmail.com']                            # One or more recipient
recipients = ['recip1@gmail.com','recip2@r-software.at']     # Or more recipients 
msg['Subject'] = "Subject of Mail"                           # Subject
msg['From'] = sender                                         # From
msg['To'] = ", ".join(recipients)                            # One or more recipients
s.sendmail(sender, recipients, msg.as_string())              # Sending email
s.quit()                                                     # Closing connection
----



----
# MODULE - OS
# interacting with the operating system
print(dir(os))                                             # Shows alls attributs and methods of the library
os.chdir("C:/temp")                                        # Change the directory
os.getcwd()                                                # Current working directory
for f in os.listdir(): print(f)                            # Outputs the entire content of the current working dir
for f in os.listdir(): fn, ext = os.path.splitext(f)       # Outputs the elements seperated in name + extension
os.rename(filename, new_name)                              # Change the filenmae
os.mkdir("folder")                                         # Creates new folder (also possible with makedirs => is prefered)
os.makedirs("folder/subfolder")                            # Creates new folder and subfolders
os.rmdir ("folder")                                        # Delete folder (prefered cause deleting ist dangerous)
os.removedirs ("folder/subfolder")                         # Delete folder and subfolders
os.stat("file")                                            # Outputs the statistics of the file (size, modification time,...)
for dirpath,dir,fileos in os.walk()                        # Outputs dirpath - all the dirs - and all the files
os.environ.get("HOME")                                     # Get home dir of the actual user
os.path.basename("temp/file.txt")                          # Outputs only the filename => file.txt
os.path.dirname("temp/file.txt")                           # Outputs only the dir => temp/  
os.path.split("temp/file.txt")                             # Outputs filename and dir as a tupel => ("temp/","file.txt")
os.path.exists("temp/file.txt")                            # Checks if filename exists in the filesystem
os.path.isdir("xyz")                                       # Checks if element is a dir
os.path.isfile("xyz")                                      # Checks if element is a file
----



----
# MODULE - LOGGING
# basic logging
import logging                                               # importing module 
logging.basicConfig(filename="fn.log",format='%(asctime)s    # Create & Config - w overwrites every time
                    %(message)s', filemode='w')                                       
logging.basicConfig(filename="fn.log",level=logging.INFO)    # Level every log > INFO possible (but not DEBUG)
...format="%(name)"s-%(levelname)s:%(asctime)s-%(message)s   # getLogger-Name / Level / Time / Message
logger=logging.getLogger()                                   # Creating an object 
logger=logging.getLogger(logname)                            # Creating an object with specific name
logger.setLevel(logging.DEBUG)                               # Setting the threshold of logger to DEBUG 
logger.debug("Harmless debug Message")                       # Debug message
logger.info("Just an information")                           # Info message
logger.warning("Its a Warning")                              # Warning message
logger.error("Did you try to divide by zero")                # Error message
logger.critical("Internet is down")                          # Critical error message
                    

# logging using RotatingFileHandler
# https://stackoverflow.com/questions/24505145/how-to-limit-log-file-size-in-python
from logging.handlers import RotatingFileHandler             # importing file handler
log_formatter = logging.Formatter('%(asctime)s               # Define format for output in logfile
    %(levelname)s %(funcName)s(%(lineno)d) %(message)s')                    
my_handler = RotatingFileHandler(logFile, mode='a',          # Define handler with maxBytes and backupCount
    maxBytes=5*1024*1024, backupCount=2, encoding=None,      # When the log grows more then maxBytes...
    delay=0)                                                 # ...itgenerates a new logfile-version
my_handler.setFormatter(log_formatter)                       # Setting the format
my_handler.setLevel(logging.INFO)                            # Setting the threshold of logger to INFO
logger = logging.getLogger('root')                           # Creating an object with name
logger.setLevel(logging.INFO)                                # Setting the threshold of logger to INFO
logger.addHandler(my_handler)                                # Define handler with definition above
----



----
# MODULE - UNITTEST
import unittest                                              # Importing module
from prg import func                                         # Import the function which will be tested
class TestFunc(unittest.TestCase):                           # Define the class for testing the function
    def testcase1(self):                                     # Define the first testcase - must begin with test*
        erg = func("x",3)                                    # call the function
        self.assertEqual("3x")                               # check if result is ok
if __name__ == '__main__': unittest.main()                   # starting the unittest
# many methods: https://docs.python.org/3/library/unittest.html
self.assertEqual(a,b)                                        # Check if equal
self.assertNotEquale(a,b)                                    # Check if not equal
self.assertTrue(x)                                           # Check if true
self.assertFalse(x)                                          # Check if false
self.assertIn(i,list)                                        # Check if i in list
self.assertNotIn(i,list)                                     # Check if i not in list
----



----
# MODULE - COLLECTIONS - COUNTER
from collections import Counter
colors = ['blue', 'blue', 'red', 'red', "red"]
counter = Counter(colors)
print(counter)                                               # Outputs counter ({'red': 3, 'blue': 2})
print(counter.most_common()[0][0])                           # Outputs the element with the most counts
print(counter["red"})                                        # Outputs the occurence of the value "red" => 3

# MOUDLE - COLLECTIONS - DEFAULTDIC
from collections import defaultdict
city_list = [('TX','Austin'), ('TX','Houston'), ('NY','Albany'), ('NY', 'Syracuse'),('GA', 'Atlanta')]
cities_by_state = defaultdict(list)                 # Define Dict als DefaultDict with Default = list
for state, city in city_list: cities_by_state[state].append(city)  # Fill the Dict - when Key not found take (list)-default
=> {'TX': ['Austin', 'Houston'], 'NY': ['Albany', 'Syracuse'], 'CA': ['Sacramento', 'Palo Alto'], 'GA': ['Atlanta']})        
----



----
# MOUDLE - ITERTOOLS
from itertools import product, combinations, combinations_with_replacement, permutations
product([0, 1], repeat=3)               # alle möglichen Kombis mit 3 Elemente => [(0,0,0),(0,0,1),(0,1,0),(0,1,1), usw.]
product('ab', '12')                     # alle Kombis der beiden Strings => [("a","1"),("a","2"),("b","1"),("b","2")]
combinations ("abc",2)                  # alle Kombis des einen String => [("a","b"),("a","c"),("b","c")]
combinations_with_replacement('abc', 2) # alle Kombis des einen Strings inkl. Doppelverw. => [("a","a"),("a","b"),("a","c"),...]
----



----
# MODULE - PANDAS
https://gist.github.com/why-not/4582705                       # examples
import pandas as pd                                           # Import Module
df = pd.read_csv("file.csv")                                  # Read csv into dataframe
df = pd.read_excel("file.xlsx")                               # Read xlsx into dataframe
df.shape                                                      # Show the shape of the dataframe (rows, columns)
df.info()                                                     # Info about the columns (number, column name, data type)
df.head(5)                                                    # Output of the first 5 rows
df.tail(5)                                                    # Output of the last 5 rows
df.columns                                                    # Output of all column names
df["2010":"2020"]["Close"]                                    # Output for slice of rows for one column
df.loc["2010":"2020", "Open":"Close"]                         # Output for slice of rows and slice of columns
df[["Open","Close"]]["2010":"2020"]                           # Output of 2 columns for the column slice
df[df.index.isin(["2020","2019"])][hist.columns[0:4]]         # Output specific rows and slice of columns
df[df.index.isin(["2020","2019"])][["Open","Close"]]          # Output specific rows and columns
df.["col1"] or df.row1                                        # Output of on column (= series)
df["col1"].value_counts()                                     # Output of alle values with their count
df["col1"].value_counts(normalize=True)                       # Output of alle values with their count in percentage
df.iloc[0]                                                    # Output of the first row
df.iloc[0,1]                                                  # Output of the first 2 rows
df.iloc[[0,1],0]                                              # Output of the first 2 rows for the first column
df.iloc[[0,1],[5,6]]                                          # Output of the first 2 rows for the columns 6 and 7
df.loc[[0,1],["col1","col2"]]                                 # Output of the first 2 rows for the named columns
df.loc["2020-07-20", :]                                       # Output all cols for specific row
df.set_index("col1", inplace=True)                            # Define col1 as new index - with inplace it is permanently saved
df.loc["xyz_col1"]                                            # Output for the before defined new index
df.sort_index(inplace=True)                                   # Sorting the new index ascending
df.sort_values(by="co1")                                      # Sorting by column ascending
df.sort_values(by="co2",ascending=False)                      # Sorting by column descending
df.sort_values(by=["col1","col2"],ascending=False)            # Sorting by 2 columns descending - first col1 and then col2
df["col1"].sort_value(ascending=False)                        # Sorting a series for one specific col descending
df.reset_index(inplace=True)                                  # Resets the index
filt = (df["col1" == "col1_val1"])                            # Defines new filter
filt2 = (df["col1"].isin(["val1","val2","val3"]))             # Defines new filter with several values
filt3 = (df["col1"] > 123)                                    # Defines new filter with a > operator
df[filt]                                                      # Outputs the result for the above filter
df[filt,"col2"]                                               # Outputs the result for the above filter with only col2
df.columns =) [x.upper() for x in df.columns]                 # Change the column titles to uppercase
df.rename(columns ={"c1":"c1new","c2":"c2new"},inplace=True)  # Change the name of 2 columns
df["c1"] = df["c1"].apply(lambda x: x.lower())                # Function lower is used for the whole column
df.apply(lambda x: x.lower())                                 # Function lower is used for the whole dataframe
df.apply(lambda x: x.lower(), axis="columns")[0:3]            # Function lower is used for the first 3 columns
df["c1"].map({"val1":"val1new","val2":"val2new"})             # Change the names of the values - all others become NaN
df["c1"].replace({"val1":"val1new","val2":"val2new"})         # Change the names of the values - all others are not touched
df["cnew1"] = df["c1"] + df["c2"]                             # New column at the end
df.drop(columns=["c1","c2"], inplace=True)                    # Deleting 2 columns
df.append({"c1":"val1"},ignore_index=True)                    # Add new row (all other cols are defined as NaN for the row)
df["col1"].nlargest(5)                                        # Outputs the 5 highest values in the column - only col1
df.nlargest(5,"col1")                                         # Outputs the 5 highest values in the column - all columns
df.nsmallest(5,"col1")                                        # Outputs the 5 lowest values in the column - all columns
df["col1"].median()   .max()   .min()                         # Median / Max / Min of a specific column
df.describe()                                                 # Several statistic for the dataframe (median,max,min,std,...)
col1_grp = df.groupby["col1"]                                 # Grouping according to col1
col1_grp.get_group("col1_value")                              # Access to one value from the group
col1_grp["col2"].median()                                     # Grouping col1 and output median for col2
col1_grp["col2"].median().loc[["A","B","C"]]                  # Grouping col1 and output median for col2 only for 3 group-values
non_zero = df[df["col1"]!=0]                                  # Filtering all Values with 0
df.dropna()                                                   # Deleting all rows with a NaN value in it
df.dropna(axis="index",how="all")                             # Deleting all rows where all columns are NaN
df.dropna(axis="columns",how="all")                           # Deleting all columns where all elements are NaN   
df.dropna(axis="index",how="any",subset=["col1"])             # Checking only for one column - and deleting according to that
df.isna()                                                     # Check where in the dataframe are NaN values
df.fillna("MISSING")                                          # Relace NaN values with text     
----



----
# MATPLOTLIB
import matplotlib.pyplot as plt                                     # Import module as plotter plt
x_values = list(range(1000))                                        # Define x values
squares = [x**2 for x in x_values]                                  # Define y values / squares
plt.plot(x_values, squares)                                         # Plot diagram with x- and y-axes
plt.scatter(x_values, squares, s=5)                                 # Sscatter diagram with x- and y-axes and line strenght = 5
plt.title("Title", fontsize=24)                                     # Title with fontsize = 24
plt.xlabel("X-Axe", fontsize=18)                                    # X-Axe title with fontsize = 18  
plt.ylabel("Y-Axe", fontsize=18)                                    # Y-Axe title with fontsize = 18
plt.tick_params(axis="both", which="major", labelsize=10)           # Params describtion with fontsize = 10
plt.axis([0,1100,0,1100000])                                        # Define scaling of axes
plt.scatter(x,y,c=squares,cmap=plt.cm.Blues,edgecolor="none", s=10) # Colors from one shade to another with different params
plt.scatter(x[0],y[0],c="green",edgecolor="none", s=100)            # Expoit the first point larger in green
plt.scatter(x[-1],y[-1],c="red",edgecolor="none", s=100)            # Expoit the last point larger in red
plt.axes().get_xaxis().set_visible(False)                           # Hide the complete x-axis description
plt.axes().get_yaxis().set_visible(False)                           # Hide the complete y-axis description
plt.figure(dpi=128, figsize=(10,6))                                 # Define custom figure size
plt.show()                                                          # Show diagram
plt.savefig("example.png",bbox_inches="tight")                      # Save diagram as png-picture-file
----



----
# PYINSTALLER
pip install pyinstaller                                       # Installation
pyinstaller prg.py                                            # Generate the bundle in a subdirectory called dist.
pyinstaller --onefile prg.py                                  # Generate only one file
--icon=app.ico                                                # Generate file with icon
--hidden-import=pkg_resources.py2_warn                        # Generating under mac os sometimes only work with this params
--exclude-module matplotlib                                   # when there is a depreciating warning from matlib        
prg.exe                                                       # Open this file to start the python-program

# Problems with path when executing from py and exe   
config_name = 'creds.json'                                    # Define the config file name
# determine if application is a script file or frozen exe
if getattr(sys, 'frozen', False):                             # Get path when starting as executable
    application_path = os.path.dirname(sys.executable)
elif __file__:                                                # Get path when running from IDE as py-file
    application_path = os.path.dirname(__file__)
config_path = os.path.join(application_path, config_name)     # Final Config Path   
----



----
# Virtual Box - MacOs
Right-Ctrl Home       					# Open Menü in VirtualBox
Read USB-Stick							# Menü aufrufen => "Geräte" und "USB" auswählen

----



----
# MODULE - SELENIUM
# chromedriver.exe in Ordner von py-file speichern
from selenium import webdriver                                    # Import WebDriver für Zugriff auf URL
import time                                                       # Import Time-Library für Verzögerungen wenn notwendig
from selenium.webdriver.common.keys import Keys                   # Import Keys to send Key-strokes
driver = webdriver.Chrome(os.getcwd() + '/chromedriver')          # Driver für Chrome definieren - mit akt. Ordner os.getcwd
driver.get("url")                                                 # Zugriff auf die URL
driver.find_element_by_xpath('//*[@id="button"]/input').click()   # KLick auf ein ELement (Copy ) - mit Untersuchen - Copy XPath
time.sleep(1)                                                     # Manchmal notwendig um Verarbeitung abzuwarten
driver.find_element_by_xpath('//*[@id="name"]').send_keys("x"])   # Feld Name wird mit Inhalt x befüllt
field = driver.find_element_by_name("q").send_keys("txt")         # Feld wird nach Name gesucht
field = driver.find_element_by_id("xy-id")                        # Feld word nach ID gesucht
field = driver.find_elements_by_class_name("cl")[0]               # Felder werdem nach Class gesucht (als Liste)
field = driver.find_elements_by_tag_name("tag")[0]                # Felder werdem nach Tag gesucht (als Liste)
el.send_keys("textbla",Keys.Backspace,Keys.ARROW_LEFT,Keys.ENTER) # Send single keyboard-elements <> chars (needs import keys)
field.submit()                                                    # Enter wird gedrückt bzw. die Seite abgeschickt
driver.quit()                                                     # Driver schließen (sonst schließt sich das Fenster nicht)
driver.title                                                      # Titel der HTML-Seite
driver.back()                                                     # Back-Function in browser-history
driver.forward()                                                  # Forward-Function in browser-history
cookie = {"name": "token", "value": "23874kljdsjhfaökldjs"}       # Define an individual cookie
driver.add_cookie(cookie)                                         # Use Cookie
driver.get_cookie("token")                                        # Outputs a specific cookie
driver.get_cookies())                                             # Outputs all cookies

# Use Selenium with chrome windows hidden
from selenium.webdriver.chrome.options import Options
options = Options()
options.add_argument('--headless')                                          # Window Hidden
if platform == "win32": options.add_argument('--start-maximized')           # Window Started Maximized (for Windows)
elif platform in ["linux","darwin"]: options.add_argument('--kiosk')        # Window Started Maximized (for Linux and Mac)

options.add_experimental_option ('excludeSwitches', ['enable-logging'])     # No error messagegs when exec in cmd
driver = webdriver.Chrome(os.getcwd() + '/chromedriver', options=options)
----



----
# MODULE - BEAUTIFUL SOAP
# siehe auch Detail Jupyter Notebook BEAUTIFUL SOAP.ipynb
from bs4 import BeautifulSoap
page = requests.get("https://www.ariva.de/dax-30")             # Read url as page
soup = BeautifulSoup (page.content,"html.parser")              # Read page with html.parser
table  = soup.find(id="result_table_0")                        # Read specific invidual id
name_box = soup.find("h1", attrs={"class": "99a4824b"})        # Read specific class
for row in table.find_all("td"):                               # Read all table data cells
for result in soup.find_all("tr", class_="arrow0"):            # Read all table rows
for col_id, col_content in enumerate(result.find_all("td")):   # Read all table data cells with id and content
entries = results.find_all("div", class_="col-xs-6")           # Read all divs with specific class
if row.get("class") == ["ellipsis", "nobr", "new"]:            # Check if class has specific content
for e in soup1.find_all("a"): e.get("href"))                   # Read all links from href element    
content.text.strip()                                           # Outputs text without whitespaces
url_i = rows[0].find('img')['src']                             # Read url from the image
image = requests.get(f'https:{url_i}').content                 # Read image as content
results.prettify()                                             # Formated Output with html indentations
if "Kein Zugriff" in soup.text:                                # Check if specific text in soup text-output
    
# Read with Selenium when necessary due the specific homepage
import time
import os
from selenium import webdriver
from bs4 import BeautifulSoup

driver = webdriver.Chrome(os.getcwd() + '/chromedriver')       # Use chromedriver.exe to read website
driver.get(link)                                               # Read link
time.sleep(2)                                                  # Wait till the full site is loaded
soup = BeautifulSoup(driver.page_source, 'html.parser')        # Read page with html.parser
time.sleep (2)                                                 # Wait again 2 seconds before closing the site
driver.quit ()                                                 # Close the chromedriver window
----



----
###### MODULE - PYQT
pip install pyqt5                                      # Installation
from PyQt5.QtWidgets import QApplication               # Defines Application
from PyQt5.QtWidgets import QLabel                     # Defines Label
from PyQt5.QtWidgets import QWidget                    # Defines Widget
from PyQt5.QtWidgets import QHBoxLayout                # Arranges horizontally from left to right
from PyQt5.QtWidgets import QVBoxLayout                # Arranges vertically from top to bottom
from PyQt5.QtWidgets import QGridLayout                # Arranges in grid from on x and y axes
from PyQt5.QtWidgets import QFormLayout                # Field for forms - 1col are titles, 2col are fields,rbs,cb
from PyQt5.QtWidgets import QPushButton                # Defines PushButton
from PyQt5.QtWidgets import QDialog                    # Module for dialog windows
from PyQt5.QtWidgets import QDialogButtonBox           # Module for button boxes in dialog windows
from PyQt5.QtWidgets import QLineEdit                  # Defines input field with text
from PyQt5.QtWidgets import QMainWindow                # Module for main windows
from PyQt5.QtWidgets import QStatusBar
from PyQt5.QtWidgets import QToolBar
app = QApplication(sys.argv)                           # Create an instance of the application
w = QWidget()                                          # Initialize a window
w.setWindowTitle('Windows Title')                      # Title of the windows
w.setGeometry(200, 200, 380, 180)                      # Define windows (1:x-coord,2:y-coord,3:width,4:height)
w.move(50, 15)                                         # Place / move windows to coodinates 60,15
msg = QLabel('<h1>Hello World!</h1>', parent=window)   # Define label / message in format h1
msg.move(50, 15)                                       # Place / move labe to coordinates 60,15
windows.show()                                         # Show the application GUI - schedules a paint event
sys.exit(app.exce_())                                  # Start the app and close it with sys.exit
layout_qh = QHBoxLayout()                              # Defines horzontal box
layout_qv = QVBoxLayout()                              # Defines vertical box
layout_qg = QGridLayout()                              # Defines grid layout
layout_qf = QFormLayout()                              # Defines form layout
layout_qh.addWidget(QPushButton('Button1'))            # Defines one or more buttons
layout_qv.addWidget(QPushButton('Button1'))            # Defines one or more buttons
layout_qg.addWidget(QPushButton('Button1'),1,0)        # Defines one or more buttons and set it to position 1,0
layout_qg.addWidget(QPushButton('Button1'),2,1,1,2)    # Set buttons to position 2,1 and span it 1row/2cols
layout_qf.addRow("text:", QLineEdit())                 # Defines input field 
w.setLayout(layout_xy)                                 # Sets layout dimensions to window
class Dialog(QDialog):                                 # Defines a class dialog which inherits from QDialog
buttons = QDialogButtonBox()                           # Define buttons for a dialog window
buttons.setStandardButtons(QDialogButtons.OK)          # Defines a ok button on a dialog window
layout_qv.addWidget(buttons)                           # Adds buttons to vertical layout
class Window(QMainWindow):                             # Defines a class Windows which inherits from QMainWindow
----



----
###### MODULE - TKinter
from tkinter import *										# Import tkinter module
root = Tk()													# Create root window
root.title("Header Title")                              	# Name of the window in the title
root.iconbitmap("pic.ico")                                  # Define icon for the windows (left upper corner)
myLabel = Label(root,text="Hello World!")               	# Creating a label widget
myLabel.pack()												# Showing myLabel on the screen
myLabel.grid(row=0,column=0,pady=10)   						# Showing myLabel on grid place 0/0 (left upper corner) with 10pixel padding from above
status = Label(root,text="St",bd=1,relief=SUNKEN,anchor=E   # Creating a status label widget with border (bd=1), sunken relief and anchor position right (east)
status.grid(row=2,column=0,columnspan=3,sticky=W+E)         # Showing status bar - with using maximum space from left to right (west to east) with sticky
myButton = Button(root,text="Click Me!")  					# Creating a button widget with a name
myButton = Button(root,text="Click Me!",state=DISABLED) 	# Creating a deactivated, greyed button widget with a name
myButton = Button(root,text="C",padx=50,pady=50)			# Creating a button widget with a name and size 50 * 50
myButton = Button(root,text="T",command=myfunc)     		# Creating a button which will excute the myfunc-function when its clicked
myButton = Button(root,text="T",command=lambda: func(nr))   # Creating a button which will excute the func-function with a numeric parameter
myButton = Button(root,text="col",bg="blue",fg="white") 	# Creating a button with background blue and foreground white
QuitButton = Button(root,text="exit",command=root.quit)		# Create a quit-button on the window
myEntry = Entry(root, width=50, borderwidth=5).pack()       # Creating a entry field - with width 50 and borderwidth 5 - and showing the field
myEntry.grid(row=0,column=0,columnspan=3)               	# Showing myEntry as grid in row/col = 0/0 and spanned over 3 columns
e.grid(row=0,column=0,padx=10,pady=10)						# Showing myEntry as grid in row/col = 0/0 and with pading in x/y-axes 
myEntry.get()												# Read content of the entry field
myEntry.insert(0,"Default-Text")                        	# Shows a default value in the entry field
myEntry.insert(0, number)									# Insert a number into the entry field
myEntry.delete(0,END)										# Delete content of the entry field
root.mainloop()												# Mainloop of the program

###Pics in Tkinter-Windows
from PIL import ImageTk,Image								# Additional module Pillow neede (install with <pip install Pillow>
my_img = ImageTk.PhotoImage(Image.open("demo.png"))			# Reads Image wiht Pillow-module (Tkinter can not read png/jpg files)
my_label = Label(image=my_img)								# Creating a Label with the image
my_label.pack()												# Showing the pic

###Define Frame
frame = LabelFrame(root,text="Name_Frame",padx=5,padx=5)	# Creating a frame with padding 5/5 (inside the frame)
frame.pack(padx=10,pady=10)									# Showing the frame with padding 10/10 (outside the frame)	
button = Button(frame,text="Name_Button")					# Creating button in the frame (not root window)
button.grid(row=0, column=0)								# Showing the button in the frame as grid (with frames is mixing between pack and grid possible)

###RadioButtons
r = IntVar()												# Define variable for radio button - when string use StringVar()
r.set("2")													# Choose default radio button	
Radiobutton(root,text="Opt1",variable=r,value=1).pack()		# Define and show radiobutton 1
Radiobutton(root,text="Opt2",variable=r,value=2).pack()		# Define and show radiobutton 2
r.get()														# Get value from choosen radio button

###MessageBox
messagebox.showinfo("Title of PopUp", "Hello World!")		# Show Messagebox
different boxes available: showinfo, showwarning, showerror, askquestion, askokcancel, askyesno
response = messagebox.askquestion ("Bla", "BlaBla!")		# Show AskQuestion Box and store response
if response == 1: Label(root, text= "YES").pack()			# Check about response of user in message box
elif response == 0: Label(root, text= "NO").pack()

----



----
###### MODULE - PYGAME
###http://pygame.org/docs/
import pygame as pg                                      # Import of the pygame module
pg.init()                                                # Initialize and setup screen
screen_dim = (1200,800)                                  # Define dimension
screen = pg.display.set_mode(screen_dim)                 # Show screen with the defined dimensions
bg_color = (230,230,230)                                 # Define background color
screen.fill(bg_color)                                    # Screen filling with defined background color
pg.display.set_caption("My Super Game")                  # Title of the game in the window
rect screen.get_rect()                                   # Rectangle infos (left,top,width,height - (0,0,1200,800)
rect.center                                              # Center of the Rectangle as tuple - (600,400)
rect-size                                                # Size of the Rectangle as tuple - (1200,800)
rect.left                                                # X-Dim left - (0) 
rect.right                                               # X-Dim right - (1200)
rect.top                                                 # Y-Dim top - (0)
rect.bottom                                              # Y-Dim bottom - (800)
rect.centerx                                             # Middle of X-Dim - (600)
rect.centery                                             # Middle of Y-Dim - (400)
rect.width                                               # Width of the rectangle - (1200)
rect.height                                              # Height of the rectangle - (800)
small_rect = pg.Rect(100,100,10,150)                     # Define new rectangle
pg.draw.rect(screen,(100,100,100,small_rect)             # Draw small rectangle in screen
figure = pg.image.load("ship.png")                       # Loading an image
figure.get_rect()                                        # Getting the rect object from an image
figure_rect.midbottom = screen_rect.midbottom            # Positioning an image in the middle of the bottom screen
screen.blit(figure, figure_rect)                         # Drawing an image to the screen
for event in pg.event.get():                             # Check if an event has happend (keystroke, mouseclick)
event.type == pg.KEYDOWN:                                # Check if key is pressed
event.key == pg.K_RIGHT:                                 # Some action when Right-Key is pressed
event.key == pg.K_SPACE:                                 # Some action when Space-Key is pressed
event.type == pg.MOUSEBUTTONDOWN                         # Check if mousebutton is clicked
mouse_pos = pg.mouse.get_pos()                           # Findinig the mouse position
button_rect.collidepoint(mouse_pos)                      # Check if mouse-cursor is ofer an object / rectangle

### Pygame groups
from pygame.sprite import Sprite,Group                   # Group class for working with similar objects
def Bullet(Sprite):                                      # Making and filling a group - must inherit from Sprite
    def draw_bullet(self):                               # Method from the new group
    def update(self):                                    # Method from the new group  
bullet = Group()                                         # Define group of elements
new_bullet = Bullet()                                    # Define new instance
bullets.add(new_bullet)                                  # Add new instance to group
from bullet in bullets.sprites(): bullet.draw_bullet()   # Iterate through group instances and draw
bullets.update()                                         # Calls the methode update() on each member of the group
bullets.remove(bullet)                                   # Remove instance from group
prg.sprite.spritecollideany(obj,group)                   # Check if single object is overlapping with groupelements
pg.sprite.groupcollide(group1,group2,True,True)          # Result-Dict with all overlapping elements of both groups
msg = "Play again!"                                      # Define message
msg_col = (100,100,100)                                  # Defines message color
bg_col = (230,230,230)                                   # Defines background color
font = pg.font.SysFont(None,48)                          # Defines font from system font
msg_img = f.render(msg,True,msg_col,bg_col)              # Create an image of the message
msg_img_rect = msg_image.get_rect()                      # Read rect from message-image
msg_img_rect.center = screen_rect.center                 # Pos the message-image in the middle of the window
screen.blit(msg_img, msg_img_rect)                       # Display the positioned message-image
----
